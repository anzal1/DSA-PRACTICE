


USE OF HASHING 

SEARCH
INSERT
DELETE

NOT USED

FINDING CLOSEST VALUE--> AVL AND RED BLACK TREE 
SORTED DATA   --->  AVL AND RED BLACK TREE
PREFIX SEARCHING ---> TRIE



APPLICATIONS OF HASHING

DICTIONARIES
DATA INDEXING
CRYPTOGRAPHY
CACHES
SYMBOL TABLES IN COMPILERS/INTERPRETORS
ROUTERS
CACHES
GETTING DATA FROM DATABASES 
MANY MORE


HASH FUNCTIONS
1 LARGE VALUES ---> MODULAR DIVSION %M

2 FOR STRINGS ,WWEIGHTED SUM
STR[] ="ABCD"
*POWER OF SOMETHING

3 UNIVERSAL HASHING


COLLISON HANDLING 

IF WE KNOW KEY IN ADVANCE ,THEN WE CAN PERFECT HASHING IF WE DON NOT KNOW KEYS,THEN WE USE ONE OF THE FOLLOWING

1 CHAINING
2 OPEN ADRESSING --> LINEAR PROBING 
                     QUADRATIC PROBING 
                     DOUBLE HASHING 



BIRTHDAY PARADOX
 23 PEOPLE 23--->50 PERCENT CHANCES
 70 PEOPLE 70--->99.99 PERECENT CHANCES 


 PERFORMANCE
 LOAD FACTOR ---> N/M
 N= NO OF KEYS TO BE INSERTED 
 M= SLOTS IN THE HASH TABLE

 EPXECTED CHAIN LENGTH ---->ALPHA OR LOAD FACTOR

 EXEPECTED TIME TO SEARCH =O(1+ALPHA)
 EXPECTED TIME TO INSERT/DELETE   =O(1+ALPHA)



DATA STRUCTURES TO STORE CHAINS

LINKED LIST--> SEARCH (L) DEL (L) INSERT (L)

DYNAMIC SIZED ARRAYS (VECTOR IN C++,ARRAY LIST IN JAVA ,LIST OF PYTHON)

SELF BALANCING TREES (BST)--> (AVL RED BLACK,TREE )

ALL OPERATIONS IN LOG(N)
